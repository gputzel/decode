import learn
import likelihood
import sys
import random
import math
from optparse import OptionParser	#Deprecated since Python 2.7 but...

def usage():
	print "Usage: python decode.py ..."

def decode(ciphertext,targetAlphabet,numSteps,verbose=False):
	return "plaintext"

if __name__ == "__main__":
	parser = OptionParser()
	parser.add_option("-c", "--cipher", dest="ciphertextFilename")
	parser.add_option("-a", "--alphabet", dest="alphabetFilename")
	parser.add_option("-o", "--output", dest="outputFilename")
	parser.add_option("-t", "--training", dest="trainingFilename")
	parser.add_option("-n","--numsteps",dest="numSteps")
	parser.add_option("-v", "--verbose", action="store_true",dest="verbose", default=False)
	(options,args) = parser.parse_args()
	if not options.outputFilename:
		print "Please specify an output file for plain text with option -o"
		sys.exit()
	if not options.ciphertextFilename:
		print "Please specify ciphertext file with option -c"
		sys.exit()
	if not options.trainingFilename:
		print "Please specify training text filename with option -t"
		sys.exit()
	if not options.alphabetFilename:
		if options.verbose:
			print "Reading target alphabet from alphabet.txt"
		alphabetFilename = "alphabet.txt"
	else:
		alphabetFilename = options.alphabetFilename
	if not options.numSteps:
		print "Please specify a number of Monte Carlo steps with option -n"
		sys.exit()
	else:
		steps = int(options.numSteps)
	try:
		#Read in target alphabet
		f = open(alphabetFilename,'r')
		alphabet = [c for c in f.readline().rstrip('\n')]
		f.close()
	except IOError:
		print "Error opening alphabet file " + alphabetFilename
		sys.exit()
	try:
		#Read in training text
		if options.verbose:
			print "Reading training text from " + options.trainingFilename + "..."
		f = open(options.trainingFilename)
		lines = f.readlines()
		training = "".join(lines).upper() #Make it all uppercase
		training = [c for c in training if c in alphabet] #Only include symbols included in target alphabet
		f.close()
	except IOError:
		print "Error opening training text file " + options.trainingFilename
		sys.exit()
	#Learn the transition matrices from the training text
	if options.verbose:
		print "Learning transition matrix from training text..."
	transitionMatrix = learn.learnMatrix(training,alphabet)
	try:
		#Read in ciphertext
		f = open(options.ciphertextFilename)
		ciphertext = "".join([l.rstrip('\n') for l in f.readlines()])
		f.close()
	except IOError:
		print "Error opening ciphertext file " + options.ciphertextFilename
		sys.exit()
	#Make sure target alphabet has at least as many symbols as ciphertext
	cipherAlphabet = list(set(ciphertext))
	if len(cipherAlphabet) > len(alphabet):
		print "Error: ciphertext contains more distinct symbols than target alphabet"
		sys.exit()
	#Special case: If ciphertext alphabet is a subset of target alphabet
	#Then give them the same order
	if set(cipherAlphabet) < set(alphabet):
		cipherAlphabet = alphabet
	#Represent two permutations using dictionaries
	#perm is the "current" permutation
	#perm2 is the "trial" permutation proposed in the Metropolis algorithm
	perm={}
	perm2={}
	for i in range(len(cipherAlphabet)):
		perm[cipherAlphabet[i]] = alphabet[i]
		perm2[cipherAlphabet[i]] = alphabet[i]
	#Instead of the likelihood, we work with the log-likelihood
	#This makes it easier to deal with very small likelihoods
	#Initial log-likelihood of the message:
	logl = likelihood.ll(ciphertext,perm,transitionMatrix)
	t = 0
	beta = 1.0
	while t < steps:
		t = t + 1
		#Trial move that permutes symbols with index i and j in the target alphabet
		i = cipherAlphabet[random.randint(0,len(cipherAlphabet)-1)]
		j = cipherAlphabet[random.randint(0,len(cipherAlphabet)-1)]
		#print i,j
		#Find log-likelihood of the message with trial move
		perm2[i]=perm[j]
		perm2[j]=perm[i]
		lltrial=likelihood.ll(ciphertext,perm2,transitionMatrix)
		#print logl,lltrial
		if lltrial > logl:
			#If the trial permutation produces a higher likelihood, accept it
			logl = lltrial
			perm[i]=perm2[i]
			perm[j]=perm2[j]
		else:
			#If the trial likelihood is lower, still give it a chance of being accepted
			if random.random() < math.exp(beta*(lltrial - logl)):
				#Accept trial move
				logl=lltrial
				perm[i]=perm2[i]
				perm[j]=perm2[j]
			else:
				#Reject trial move
				perm2[i]=perm[i]
				perm2[j]=perm[j]
		if t % 1000 == 0:
			if options.verbose:
				print "Step ", t
				print "".join([perm[c] for c in ciphertext])
	try:
		#Write the output
		f = open(options.outputFilename,'w')
		f.write("".join([perm[c] for c in ciphertext]))
		f.close()
	except IOError:
		print "Error: Could not open output file " + options.outputFilename
		sys.exit()
